import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import  ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os
from pydub import AudioSegment

from fullrag import llmmodel
from whisper import translate_audio


API_TOKEN = '7830435119:AAFjmuG6OZAPv2fmCUHVB_9nRDmmPsTa2Rc'
# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
MODERATOR_LOGIN = "moderator"
MODERATOR_PASSWORD = "password123"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

moderator_id = None  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
user_id = None       # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
question_data = {}   # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ø—Ä–æ—Å–µ, –≤–∫–ª—é—á–∞—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ

rag_model = llmmodel()

def get_llm_answer(question):
    print('START GENERATING ANSWER')
    an = rag_model.generate_answer(question).strip()
    print('FINISHED GENERATING ANSWER')
    return '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!' + '\n' + an

if not os.path.exists("voices"):
    os.makedirs("voices")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
class ModeratorForm(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class EditNumberForm(StatesGroup):
    waiting_for_custom_number = State()

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
def get_moderator_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üëÆ –í–æ–π—Ç–∏ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä"))
    keyboard.add(KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))
    return keyboard

def get_emoji_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üëç"))
    keyboard.add(KeyboardButton("üëé"))
    return keyboard

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–æ
def get_moderator_choice_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_number"))
    keyboard.add(InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å", callback_data="leave_number"))
    return keyboard

async def save_voice_message(voice: types.Voice, file_name: str):
    file = await bot.get_file(voice.file_id)
    await bot.download_file(file.file_path, file_name)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è OGG –≤ MP3
    audio = AudioSegment.from_file(file_name, format="ogg")
    audio.export(file_name, format="mp3")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ü—Ä–∏–≤–µ—Ç")
def process_voice_message_to_text(file_name: str) -> str:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    result = translate_audio(file_name)
    print(result)
    return result


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    global user_id
    user_id = message.from_user.id
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QnA –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Rutube!\n\n"
        "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n"
        "–æ–ø–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É."
    )
    await message.reply(welcome_text, reply_markup=get_moderator_keyboard())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"
@dp.message_handler(lambda message: message.text == "üëÆ –í–æ–π—Ç–∏ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
async def moderator_login_start(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await ModeratorForm.waiting_for_login.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
@dp.message_handler(state=ModeratorForm.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    if message.text == MODERATOR_LOGIN:
        await state.update_data(login=message.text)
        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await ModeratorForm.waiting_for_password.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
@dp.message_handler(state=ModeratorForm.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    if message.text == MODERATOR_PASSWORD:
        global moderator_id
        moderator_id = message.from_user.id
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.\n–°—é–¥–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ LLM.\n–í—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()  # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.finish()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
@dp.message_handler(lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def user_question_start(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice_message(message: types.Message):
    global moderator_id
    if moderator_id:

        voice = message.voice
        file_name = f"voices/voice_{message.from_user.id}_{message.message_id}.mp3"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await save_voice_message(voice, file_name)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        processed_text = str(process_voice_message_to_text(file_name))
        question_data['question'] = processed_text
        question_data['llm_answer'] = get_llm_answer(processed_text)


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        msg = await bot.send_message(moderator_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question_data['question']}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {question_data['llm_answer']}",
                               reply_markup=get_moderator_choice_keyboard())
        question_data['moderator_message_id'] = msg.message_id
        await message.reply("–í–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(lambda message: message.from_user.id == user_id and moderator_id is not None)
async def user_question(message: types.Message):
    if message.text not in ["üëç", "üëé"]:
        if moderator_id:
            await message.reply("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")
            question_data['question'] = message.text
            question_data['llm_answer'] = get_llm_answer(message.text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            msg = await bot.send_message(moderator_id, f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question_data['question']}\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Ç–≤–µ—Ç: {question_data['llm_answer']}",
                                reply_markup=get_moderator_choice_keyboard())
            question_data['moderator_message_id'] = msg.message_id

        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
    else:pass

# Callback —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query_handler(lambda c: c.data in ["edit_number", "leave_number"])
async def process_moderator_choice(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    await bot.edit_message_reply_markup(
        chat_id=moderator_id,
        message_id=question_data['moderator_message_id'],
        reply_markup=None
    )

    if callback_query.data == "edit_number":
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∏—Å–ª–æ
        await bot.send_message(moderator_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await EditNumberForm.waiting_for_custom_number.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif callback_query.data == "leave_number":
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–ª –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {question_data['llm_answer']}", reply_markup=get_emoji_keyboard())
        await bot.send_message(moderator_id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")  # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        await bot.answer_callback_query(callback_query.id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
@dp.message_handler(state=EditNumberForm.waiting_for_custom_number)
async def process_custom_message(message: types.Message, state: FSMContext):
    await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {message.text}", reply_markup=get_emoji_keyboard())
    await message.reply("–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message_handler()
async def handle_message(message: types.Message):
    if message.text not in ["üëç", "üëé"]:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    else:
        pass

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
